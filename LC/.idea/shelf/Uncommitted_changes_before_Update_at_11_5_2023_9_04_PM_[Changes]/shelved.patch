Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import Tests.Tests;\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tTests test = new Tests();\r\n\t\ttest.P25Test();\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Main.java b/src/Main.java
--- a/src/Main.java	(revision 7fc2a47e5685fb44678f725da04eaba9f14636e3)
+++ b/src/Main.java	(date 1698094556248)
@@ -4,7 +4,7 @@
 
 	public static void main(String[] args) {
 		Tests test = new Tests();
-		test.P25Test();
+		test.P27Test();
 		
 	}
 	
Index: src/Leetcode/P0029.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Leetcode;\r\n\r\npublic class P0029 {\r\n    /**\r\n     * Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\r\n     *\r\n     * The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\r\n     *\r\n     * Return the quotient after dividing dividend by divisor.\r\n     *\r\n     * Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−2^31, 2^31 − 1].\r\n     * For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -2^31, then return -2^31.\r\n     * @param dividend\r\n     * @param divisor\r\n     * @return quotient\r\n     */\r\n    public int divide(int dividend, int divisor) {\r\n        return 0;\r\n    }\r\n\r\n    public int divideBrute(int dividend, int divisor){\r\n        while(divisor < dividend){\r\n            dividend -= divisor;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Leetcode/P0029.java b/src/Leetcode/P0029.java
--- a/src/Leetcode/P0029.java	(revision 7fc2a47e5685fb44678f725da04eaba9f14636e3)
+++ b/src/Leetcode/P0029.java	(date 1698094576340)
@@ -18,11 +18,11 @@
         return 0;
     }
 
-    public int divideBrute(int dividend, int divisor){
-        while(divisor < dividend){
-            dividend -= divisor;
-        }
-    }
+//    public int divideBrute(int dividend, int divisor){
+//        while(divisor < dividend){
+//            dividend -= divisor;
+//        }
+//    }
 
 
 }
Index: src/Leetcode/P0025.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Leetcode;\r\n\r\nimport Structure.ListNode;\r\n\r\npublic class P0025 {\r\n    /**\r\n     * Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\r\n     *\r\n     * k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\r\n     *\r\n     * You may not alter the values in the list's nodes, only nodes themselves may be changed.\r\n     *\r\n     * Input: head = [1,2,3,4,5], k = 2\r\n     * Output: [2,1,4,3,5]\r\n     *\r\n     * Input: head = [1,2,3,4,5], k = 3\r\n     * Output: [3,2,1,4,5]\r\n     *\r\n     * @param head\r\n     * @param k\r\n     * @return\r\n     */\r\n    public ListNode reverseKGroup(ListNode head, int k) {\r\n        int count = 0;\r\n        ListNode ans = new ListNode(0,head);\r\n        ListNode h = head;\r\n        while(head != null){\r\n            count++;\r\n            if(count >= k){\r\n                count = 1;\r\n                ListNode temp = head.next;\r\n                //cut the link\r\n                head.next = null;\r\n                reverse(h).next = temp;\r\n                head = temp;\r\n                h = temp;\r\n            }\r\n            h = head;\r\n            head = head.next;\r\n        }\r\n        return ans.next;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param head\r\n     * @return End of the list node\r\n     */\r\n    private ListNode reverseListNode(ListNode head){\r\n        if(head == null || head.next == null){\r\n            return head;\r\n\r\n        }\r\n        ListNode temp = reverseListNode(head.next);\r\n        head.next.next = head;\r\n        head.next = null;\r\n        return temp;\r\n    }\r\n\r\n    private ListNode reverse(ListNode head){\r\n        if(head == null || head.next == null){\r\n            before.next = head;\r\n            return head;\r\n\r\n        }\r\n        reverseListNode(head.next);\r\n        head.next.next = head;\r\n        head.next = null;\r\n        return head;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Leetcode/P0025.java b/src/Leetcode/P0025.java
--- a/src/Leetcode/P0025.java	(revision 7fc2a47e5685fb44678f725da04eaba9f14636e3)
+++ b/src/Leetcode/P0025.java	(date 1698094536555)
@@ -59,7 +59,7 @@
 
     private ListNode reverse(ListNode head){
         if(head == null || head.next == null){
-            before.next = head;
+//            before.next = head;
             return head;
 
         }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_18\" default=\"true\" project-jdk-name=\"18\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 7fc2a47e5685fb44678f725da04eaba9f14636e3)
+++ b/.idea/misc.xml	(date 1698116741315)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ProjectRootManager" version="2" languageLevel="JDK_18" default="true" project-jdk-name="18" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
